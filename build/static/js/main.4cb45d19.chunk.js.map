{"version":3,"sources":["App.js","index.js"],"names":["boardStyle","width","height","display","gridTemplate","playerTextStyle","fontSize","ButtonLayout","colour","onClick","GameBoard","buttons","style","map","button","i","App","useState","player","setPlayer","Array","fill","board","setBoard","gameWinner","buttonValue","combinations","length","x","y","z","r","checkWinner","boardDuplicate","ReactDOM","render","document","getElementById"],"mappings":"4JAGMA,EAAa,CACfC,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,aAAc,mCAGZC,EAAkB,CACpBC,SAAU,QAId,SAASC,EAAT,GAA2C,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,QAC5B,OACI,aADI,CACJ,UAAQA,QAAWA,EAAnB,SAEQD,IAOhB,SAASE,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,QAASF,EAAU,EAAVA,QAC1B,OACI,qBAAKG,MAASZ,EAAd,SACKW,EAAQE,KAAI,SAACC,EAAOC,GACjB,OAAO,cAACR,EAAD,CAAwBC,OAAUM,EAAQL,QAAW,kBAAMA,EAASM,KAA/CA,QAoE7BC,MAvCf,WACI,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAASG,MAAM,IAAIC,KAAK,OAAlD,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EA1BV,SAAqBC,GAcjB,IAZA,IAAMC,EAAc,CAChB,CAAC,EAAE,EAAE,EAAE,IACP,CAAC,EAAE,EAAE,EAAE,IACP,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,GAAG,GAAG,GAAG,KAILX,EAAI,EAAGA,EAAIW,EAAaC,OAAQZ,IAAI,CACzC,kBAAkBW,EAAaX,GAA/B,GAAOa,EAAP,KAASC,EAAT,KAAWC,EAAX,KAAaC,EAAb,KACA,GAAIN,EAAYG,IAAMH,EAAYG,KAAOH,EAAaI,IAAMJ,EAAYG,KAAOH,EAAaK,IAAML,EAAYG,KAAOH,EAAYM,GAC7H,OAAON,EAAYG,GAG3B,OAAO,KAMYI,CAAYV,GAkB/B,OAEI,cADA,CACA,sBACI,cAACZ,EAAD,CAAWC,QAAWW,EAAOb,QAnBrC,SAAqBmB,GAEjB,IAAMK,EAAc,YAAOX,GAEvBE,GAAcS,EAAeL,KAKjCK,EAAeL,GAAKV,EAAS,MAAO,SAGpCK,EAASU,GACTd,GAAWD,OAQP,qBAAKN,MAASP,EAAd,SACI,4BAGQmB,EAAa,WAAaA,EAAa,UAAYN,EAAS,iBAAmB,6BCrFvGgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4cb45d19.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n//board grid style\r\nconst boardStyle = {\r\n    width: '300px',\r\n    height: '200px',\r\n    display: 'grid',\r\n    gridTemplate: 'repeat(4, 1fr) / repeat(4, 1fr)'\r\n};\r\n\r\nconst playerTextStyle = {\r\n    fontSize: '22px',\r\n};\r\n\r\n// makes the button\r\nfunction ButtonLayout ({colour, onClick}) {\r\n    return (//create button\r\n        <button onClick = {onClick}>\r\n            {\r\n                colour\r\n            }\r\n        </button>\r\n    );\r\n}\r\n\r\n//a function that calls the ButtonLayout function and maps the buttons created into a grid\r\nfunction GameBoard ({buttons, onClick}) {\r\n    return (\r\n        <div style = {boardStyle}>\r\n            {buttons.map((button,i) => {\r\n                return <ButtonLayout key = {i} colour = {button} onClick = {() => onClick (i)} />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction checkWinner(buttonValue){\r\n    //All winning moves horizontally and vertically\r\n    const combinations =[\r\n        [0,4,8,12],\r\n        [1,5,9,13],\r\n        [2,6,10,14],\r\n        [3,7,11,15],\r\n        [0,1,2,3],\r\n        [4,5,6,7],\r\n        [8,9,10,11],\r\n        [12,13,14,15]\r\n    ];\r\n\r\n    //checks if the four buttons beside each other are the same value\r\n    for (let i = 0; i < combinations.length; i++){\r\n        const [x,y,z,r] = combinations[i];\r\n        if (buttonValue[x] && buttonValue[x] === buttonValue [y] && buttonValue[x] === buttonValue [z] && buttonValue[x] === buttonValue[r]){\r\n            return buttonValue[x];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction App() {\r\n    const [player, setPlayer] = useState(true);\r\n    const [board, setBoard] = useState(Array(16).fill(null)); //array of 16 buttons in the board\r\n    const gameWinner = checkWinner(board);\r\n\r\n    function handleClick(x) {\r\n        //creates a copy of the board\r\n        const boardDuplicate = [...board];\r\n\r\n        if (gameWinner || boardDuplicate[x]) {\r\n            return;\r\n        }\r\n\r\n        //depending on the player's turn, it sets the value of the button to either red or yellow\r\n        boardDuplicate[x] = player ? 'RED': 'YELLOW';\r\n\r\n        //changes state of the board and player\r\n        setBoard(boardDuplicate);\r\n        setPlayer(!player);\r\n    }\r\n\r\n    return (\r\n        //initializes the game (GameBoard) with the given parameters to make it interactive\r\n        <>\r\n            <GameBoard buttons = {board} onClick = {handleClick} />\r\n\r\n            <div style = {playerTextStyle}>\r\n                <p>\r\n                    {\r\n                        //checks if gameWinner is true, then stop the game and show who won, else if there is not a winner yet, display the current player's turn\r\n                        gameWinner ? 'Winner: ' + gameWinner : 'Turn: ' + (player ? 'Player 1 (RED)' : 'Player 2 (YELLOW)')\r\n                    }\r\n                </p>\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}